# Define the subscriptions to iterate over
$subscriptions = @(
    "subscription-id-1",
    "subscription-id-2",
    "subscription-id-3",
    "subscription-id-4",
    "subscription-id-5",
    "subscription-id-6",
    "subscription-id-7",
    "subscription-id-8"
)

# Function to get primary contact from tags
function Get-PrimaryContact {
    param (
        [hashtable]$Tags
    )
    $possibleTags = @('Primary_contact', 'primary_contact', 'primaryContact', 'primarycontact')
    foreach ($tag in $possibleTags) {
        if ($Tags.ContainsKey($tag)) {
            return $Tags[$tag]
        }
    }
    return $null
}

# Log in to Azure
Write-Host "Logging into Azure..."
Connect-AzAccount

# Array to hold the result
$results = @()

# Iterate over each subscription
foreach ($subscriptionId in $subscriptions) {
    Write-Host "Switching to subscription: $subscriptionId"
    Set-AzContext -SubscriptionId $subscriptionId

    # Get all Function Apps in the current subscription
    $functionApps = Get-AzWebApp -FunctionApp

    foreach ($functionApp in $functionApps) {
        $resourceGroupName = $functionApp.ResourceGroup
        $appName = $functionApp.Name
        $tags = $functionApp.Tags

        # Try to get the primary contact from the Function App tags
        $primaryContact = Get-PrimaryContact -Tags $tags

        # If primary contact is not found in Function App tags, check Resource Group tags
        if (-not $primaryContact) {
            $resourceGroup = Get-AzResourceGroup -Name $resourceGroupName
            $resourceGroupTags = $resourceGroup.Tags
            $primaryContact = Get-PrimaryContact -Tags $resourceGroupTags
        }

        # Add to results array
        $results += [PSCustomObject]@{
            FunctionAppName    = $appName
            SubscriptionId     = $subscriptionId
            ResourceGroupName  = $resourceGroupName
            PrimaryContact     = $primaryContact
        }
    }
}

# Path to the CSV file
$outputCsv = "FunctionAppsPrimaryContacts.csv"

# Export results to CSV
$results | Export-Csv -Path $outputCsv -NoTypeInformation

Write-Host "Results have been exported to $outputCsv"