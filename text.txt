Certainly! Below is an example of C# code that loops through an array of Azure Storage accounts and deletes table rows that are older than 365 days. Please ensure you have the necessary Azure Storage libraries installed and proper permissions set up before running this code.

using Microsoft.Azure.Cosmos.Table;
using System;
using System.Threading.Tasks;

public class StorageAccountCleaner
{
public static async Task RemoveOldTableRowsAsync(CloudTable[] storageAccounts)
{
foreach (var storageAccount in storageAccounts)
{
TableQuery<DynamicTableEntity> query = new TableQuery<DynamicTableEntity>().Where(
TableQuery.GenerateFilterConditionForDate("Timestamp", QueryComparisons.LessThan, DateTimeOffset.UtcNow.AddDays(-365))
);

TableContinuationToken token = null;
do
{
var resultSegment = await storageAccount.ExecuteQuerySegmentedAsync(query, token);
token = resultSegment.ContinuationToken;

// Loop through the results, displaying information about the entity
foreach (DynamicTableEntity entity in resultSegment.Results)
{
// Delete the entity
TableOperation deleteOperation = TableOperation.Delete(entity);
await storageAccount.ExecuteAsync(deleteOperation);
}
} while (token != null);
}
}
}

// Usage example:
// Assuming 'cloudTables' is an array of CloudTable objects representing your Azure Storage Tables
await StorageAccountCleaner.RemoveOldTableRowsAsync(cloudTables);

This code uses the Azure Cosmos Table SDK to query and delete rows. It's important to handle exceptions and errors in production code, which this example does not include for brevity. Also, consider implementing logging and proper resource management as needed.
