using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Microsoft.Azure.Management.ResourceManager;
using Microsoft.Azure.Management.ResourceManager.Models;
using Microsoft.Rest;

public static async Task<List<VmEncryptionInfo>> GetVMsWithoutHostEncryption(string[] subscriptionIds)
{
    var vmInfoList = new List<VmEncryptionInfo>();
    var credentials = SdkContext.AzureCredentialsFactory.FromServicePrincipal(clientId, clientSecret, tenantId, AzureEnvironment.AzureGlobalCloud);
    var resourceManagementClient = new ResourceManagementClient(credentials) { SubscriptionId = subscriptionIds[0] };

    foreach (var subscriptionId in subscriptionIds)
    {
        resourceManagementClient.SubscriptionId = subscriptionId;
        var vms = await resourceManagementClient.VirtualMachines.ListAllAsync();

        foreach (var vm in vms)
        {
            var vmInfo = new VmEncryptionInfo
            {
                Name = vm.Name,
                ResourceGroup = vm.ResourceGroupName,
                SubscriptionId = subscriptionId
            };

            // Get owner and DR Tier from tags
            vmInfo.Owner = GetResourceTag(vm.Tags, "PrimaryContact") ?? GetResourceTag(vm.Tags, "primarycontact");
            vmInfo.DrTier = GetResourceTag(vm.Tags, "DRTier");

            // Check for encryption at host using virtualMachineExtension for each disk
            var hasHostEncryption = await HasHostEncryption(resourceManagementClient, vm);
            if (!hasHostEncryption)
            {
                vmInfoList.Add(vmInfo);
            }
        }
    }

    return vmInfoList;
}

public static async Task<bool> HasHostEncryption(ResourceManagementClient client, VirtualMachine vm)
{
    foreach (var dataDisk in vm.StorageProfile.DataDisks)
    {
        var extension = await client.VirtualMachineExtensions.GetAsync(vm.ResourceGroupName, vm.Name, dataDisk.Name);
        if (extension != null && extension.Name.Contains("AzureDiskEncryption"))
        {
            return true;
        }
    }

    var extension = await client.VirtualMachineExtensions.GetAsync(vm.ResourceGroupName, vm.Name, vm.OsProfile.OsDisk.Name);
    return extension != null && extension.Name.Contains("AzureDiskEncryption");
}

public static string GetResourceTag(IDictionary<string, string> tags, string key)
{
    if (tags?.ContainsKey(key) == true)
    {
        return tags[key];
    }

    return null;
}

public class VmEncryptionInfo
{
    public string Name { get; set; }
    public string ResourceGroup { get; set; }
    public string SubscriptionId { get; set; }
    public string Owner { get; set; }
    public string DrTier { get; set; }
}
