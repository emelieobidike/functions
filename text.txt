const { DefaultAzureCredential } = require("@azure/identity");
const { AuthorizationManagementClient } = require("@azure/arm-authorization");
const { Client } = require("@microsoft/microsoft-graph-client");

module.exports = async function (context, req) {
    context.log("Azure Function triggered.");

    const credential = new DefaultAzureCredential();

    // Function to get disabled Azure AD users
    async function getDisabledUsers() {
        context.log("Fetching disabled Azure AD users...");
        const graphClient = Client.initWithMiddleware({
            authProvider: {
                getAccessToken: async () => {
                    const tokenResponse = await credential.getToken("https://graph.microsoft.com/.default");
                    return tokenResponse.token;
                },
            },
        });

        const users = await graphClient.api("/users").select("id,displayName,userPrincipalName,accountEnabled").get();
        return users.value.filter(user => user.accountEnabled === false);
    }

    // Function to get all role assignments
    async function getRoleAssignments(subscriptionId) {
        context.log(`Fetching role assignments for subscription: ${subscriptionId}`);
        const authClient = new AuthorizationManagementClient(credential, subscriptionId);
        const roleAssignments = [];
        for await (const assignment of authClient.roleAssignments.list()) {
            roleAssignments.push(assignment);
        }
        return roleAssignments;
    }

    // Function to construct an HTML table
    function generateHtmlTable(data) {
        let html = "<table border='1' style='border-collapse: collapse; width: 100%;'>";
        html += `
            <thead>
                <tr>
                    <th>Display Name</th>
                    <th>User Principal Name</th>
                    <th>Role</th>
                    <th>Scope</th>
                </tr>
            </thead>
            <tbody>
        `;
        data.forEach(row => {
            html += `
                <tr>
                    <td>${row.DisplayName}</td>
                    <td>${row.UserPrincipalName}</td>
                    <td>${row.Role}</td>
                    <td>${row.Scope}</td>
                </tr>
            `;
        });
        html += "</tbody></table>";
        return html;
    }

    // Main process
    try {
        const disabledUsers = await getDisabledUsers();
        context.log(`Found ${disabledUsers.length} disabled Azure AD users.`);

        const subscriptionId = "your-subscription-id"; // Replace with your Azure subscription ID
        const roleAssignments = await getRoleAssignments(subscriptionId);

        const results = [];
        disabledUsers.forEach(user => {
            roleAssignments.forEach(assignment => {
                if (assignment.principalId === user.id) {
                    results.push({
                        DisplayName: user.displayName,
                        UserPrincipalName: user.userPrincipalName,
                        Role: assignment.roleDefinitionName,
                        Scope: assignment.scope,
                    });
                }
            });
        });

        context.log(`Found ${results.length} disabled users with role assignments.`);

        // Generate the HTML table
        const htmlTable = generateHtmlTable(results);

        // Return the HTML table as the response
        context.res = {
            status: 200,
            headers: {
                "Content-Type": "text/html",
            },
            body: htmlTable,
        };
    } catch (err) {
        context.log.error("Error occurred:", err);
        context.res = {
            status: 500,
            body: { error: "An error occurred while processing the request." },
        };
    }
};