Certainly! Here's a C# code snippet that uses Azure.Data.Tables to loop through a list of 6 Azure Storage accounts, iterate over all tables in each account, and remove rows that are older than 365 days:

using Azure;
using Azure.Data.Tables;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

class Program
{
static async Task Main(string[] args)
{
// List of connection strings for the 6 Azure Storage accounts
var connectionStrings = new List<string>
{
"Account1_ConnectionString",
"Account2_ConnectionString",
"Account3_ConnectionString",
"Account4_ConnectionString",
"Account5_ConnectionString",
"Account6_ConnectionString"
};

// Loop through each connection string
foreach (var connectionString in connectionStrings)
{
var serviceClient = new TableServiceClient(connectionString);

// Fetch the list of tables for each storage account
AsyncPageable<string> tables = serviceClient.GetTableNamesAsync();
await foreach (var tableName in tables)
{
var tableClient = serviceClient.GetTableClient(tableName);

// Define a filter for rows older than 365 days
string filter = TableClient.CreateQueryFilter($"Timestamp lt {DateTimeOffset.UtcNow.AddDays(-365):O}");

// Query the table for entities older than 365 days
AsyncPageable<TableEntity> queryResults = tableClient.QueryAsync<TableEntity>(filter);

// Loop through the results and delete each entity
await foreach (var entity in queryResults)
{
await tableClient.DeleteEntityAsync(entity.PartitionKey, entity.RowKey);
}
}
}
}
}

Replace "AccountX_ConnectionString" with the actual connection strings of your Azure Storage accounts. This code assumes that you have the necessary permissions to list and delete entities in the tables.

Please note that this code does not include error handling and logging, which are important for production use. Also, consider implementing batch deletion for better performance when dealing with a large number of entities.
