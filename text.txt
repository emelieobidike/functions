const { DefaultAzureCredential } = require("@azure/identity");
const { AuthorizationManagementClient } = require("@azure/arm-authorization");
const { Client } = require("@microsoft/microsoft-graph-client");

// Initialize Azure credentials
const credential = new DefaultAzureCredential();

// Function to get disabled Azure AD users
async function getDisabledUsers() {
    const graphClient = Client.initWithMiddleware({
        authProvider: {
            getAccessToken: async () => {
                const tokenResponse = await credential.getToken("https://graph.microsoft.com/.default");
                return tokenResponse.token;
            },
        },
    });

    const users = await graphClient.api("/users").select("id,displayName,userPrincipalName,accountEnabled").get();
    return users.value.filter(user => user.accountEnabled === false);
}

// Function to get all role assignments
async function getRoleAssignments(subscriptionId) {
    const authClient = new AuthorizationManagementClient(credential, subscriptionId);
    const roleAssignments = [];
    for await (const assignment of authClient.roleAssignments.list()) {
        roleAssignments.push(assignment);
    }
    return roleAssignments;
}

// Main function to find disabled users with role assignments
async function findDisabledUsersWithAccess() {
    const disabledUsers = await getDisabledUsers();
    console.table(disabledUsers, ["displayName", "userPrincipalName", "id"]);

    console.log("\nFetching role assignments...");

    const subscriptionId = "your-subscription-id"; // Replace with your Azure subscription ID
    const roleAssignments = await getRoleAssignments(subscriptionId);

    const results = [];
    disabledUsers.forEach(user => {
        roleAssignments.forEach(assignment => {
            if (assignment.principalId === user.id) {
                results.push({
                    DisplayName: user.displayName,
                    UserPrincipalName: user.userPrincipalName,
                    Role: assignment.roleDefinitionName,
                    Scope: assignment.scope,
                });
            }
        });
    });

    if (results.length > 0) {
        console.log("\nDisabled users with access to resources:");
        console.table(results);
    } else {
        console.log("\nNo disabled users found with access to resources.");
    }
}

findDisabledUsersWithAccess().catch(err => console.error("Error:", err));