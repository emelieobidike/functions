param($Timer)

Connect-AzAccount -Identity

function Main() {
    $storageAccounts = @(
        "zw2isdevinfstadiag01",
        "zw2isprdinfstadiag01",
        "zw2isprdinfstadiag02",
        "zw2issbxinfstadiag01",
        "zw2tldevinfstadiag01",
        "zw2tlprdinfstadiag01",
        "zw2wpdevinfstadiag01",
        "zw2wpprdinfstadiag01"
    )

    foreach ($storageAccount in $storageAccounts) {
        $context = Get-StorageContext $storageAccount
        Write-Host "Working on" $storageAccount
        Remove-TableRows $context 
    }
}

function Get-StorageContext($storageAccount) {
    $token = Get-AzKeyVaultSecret -VaultName "prunner-keyvault-prd" -Name $storageAccount -AsPlainText
    return New-AzStorageContext -StorageAccountName $storageAccount -SasToken $token
}

function Remove-TableRows($context) {
    $tables = Get-AzStorageTable -Context $context
    $Days = 365
    $Date = (Get-Date).AddDays(-$Days)

    foreach ($table in $tables) {
        Write-Host "Working on table" $table.Name
        $storageTable = Get-AzStorageTable -Name $table.Name -Context $context

        # Create the query with a filter for entities older than the specified number of days
        $TableQuery = New-Object Microsoft.Azure.Cosmos.Table.TableQuery
        $Filter = [Microsoft.Azure.Cosmos.Table.TableQuery]::GenerateFilterConditionForDate("Timestamp", "lt", $Date)
        $TableQuery.FilterString = $Filter

        # Initialize continuation token
        $ContinuationToken = $null

        do {
            # Execute query in segmented manner using continuation token
            $ResultSegment = $storageTable.CloudTable.ExecuteQuerySegmentedAsync($TableQuery, $ContinuationToken).Result

            # Update continuation token to get the next batch of results
            $ContinuationToken = $ResultSegment.ContinuationToken

            # Process each entity in the batch
            foreach ($Entity in $ResultSegment.Results) {
                Write-Host "Deleting entity from table $table.Name"
                $storageTable.CloudTable.ExecuteAsync([Microsoft.Azure.Cosmos.Table.TableOperation]::Delete($Entity)).Wait()
            }

        } while ($ContinuationToken -ne $null) # Continue until all rows are processed

        Write-Host "All entities older than $Days days have been deleted from $table.Name"
    }
}

Main