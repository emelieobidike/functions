using Azure.Identity;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Resources;
using System.IO;
using System.Linq;

// Authenticate to Azure
var credentials = new DefaultAzureCredential(); // Use DefaultAzureCredential if applicable

// Create CSV file with headers
using (var writer = new StreamWriter("vmEncryptionStatus.csv"))
{
    writer.WriteLine("Subscription,ResourceGroup,Owner,EncryptionAtHost");

    foreach (var subscriptionId in new[] { "YourSubscriptionId1", "YourSubscriptionId2", "YourSubscriptionId3", "YourSubscriptionId4", "YourSubscriptionId5", "YourSubscriptionId6" })
    {
        try
        {
            // Create a resource management client
            var client = new ArmClient(credentials);

            // Use filters with GetSubscriptions to retrieve desired subscription by ID
            var subscriptions = client.GetSubscriptions().ToList(f => f.Where(s => s.Id.ToString() == subscriptionId));

            // Access the first subscription matching the ID (assuming there's only one)
            var subscription = subscriptions.FirstOrDefault();

            if (subscription != null)
            {
                var resourceGroups = subscription.GetResourceGroups().List();

                // Iterate through resource groups
                foreach (var resourceGroup in resourceGroups)
                {
                    var computeClient = new ComputeManagementClient(client, subscription.Id);
                    var vms = computeClient.VirtualMachines.List(resourceGroup.Name);

                    // Iterate through VMs
                    foreach (var vm in vms)
                    {
                        var ownerTag = vm.Tags.Where(t => t.Key.Equals("PrimaryContact", StringComparison.OrdinalIgnoreCase) || t.Key.Equals("primarycontact", StringComparison.OrdinalIgnoreCase)).Select(t => t.Value).FirstOrDefault();

                        // Check for encryption at host
                        var encryptionEnabled = vm.EncryptionSettings?.DiskEncryptionSettings?.EncryptionAtRestEnabled ?? false; // Handle potential null value

                        // Write data to CSV
                        writer.WriteLine($"{subscription.Id},{resourceGroup.Name},{ownerTag},{encryptionEnabled}");
                    }
                }
            }
            else
            {
                // Handle case where subscription ID is not found
                Console.WriteLine($"Subscription with ID {subscriptionId} not found.");
            }
        }
        catch (Azure.RequestFailedException ex) when (ex.Message.Contains("ResourceNotFound"))
        {
            // Handle the case where a resource group is not found
        }
    }
}
