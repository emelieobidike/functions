param (
    [string]$OutputFile = "exported_config.auto.tfvars.json"
)

function Get-AllSubscriptions {
    az account list --query "[].id" -o tsv
}

function Get-PolicyAssignmentsForScope($scope) {
    az policy assignment list --scope $scope | ConvertFrom-Json
}

function Get-InitiativeAssignmentsForScope($scope) {
    az policy assignment list --scope $scope --query "[?policyDefinitionId.contains(@, 'policySetDefinitions')]" | ConvertFrom-Json
}

function Get-FormattedAssignment($assignment) {
    return @{
        name                  = $assignment.name
        is_custom             = $false
        policy_definition_id  = $assignment.policyDefinitionId
        policy_key            = $null
        enforcement           = ($assignment.enforcementMode -eq "Default")
        parameters            = if ($assignment.parameters) { $assignment.parameters | ConvertTo-Json -Compress } else { "{}" }
    }
}

$output = @{
    policies    = @{}
    initiatives = @{}
    exemptions  = @{}
}

$subscriptions = Get-AllSubscriptions
foreach ($sub in $subscriptions) {
    $subScope = "/subscriptions/$sub"

    # Process individual policy assignments (not part of initiatives)
    $assignments = Get-PolicyAssignmentsForScope -scope $subScope | Where-Object {
        $_.policyDefinitionId -notlike "*policySetDefinitions*"
    }

    if ($assignments.Count -gt 0) {
        $output.policies[$sub] = @{
            scope_type         = "subscription"
            scope_id           = $subScope
            policy_assignments = @()
        }

        foreach ($a in $assignments) {
            $output.policies[$sub].policy_assignments += Get-FormattedAssignment -assignment $a
        }
    }

    # Process initiatives
    $initiatives = Get-InitiativeAssignmentsForScope -scope $subScope

    if ($initiatives.Count -gt 0) {
        $output.initiatives[$sub] = @{
            scope_type         = "subscription"
            scope_id           = $subScope
            policy_assignments = @()
        }

        foreach ($i in $initiatives) {
            $output.initiatives[$sub].policy_assignments += Get-FormattedAssignment -assignment $i
        }
    }
}

$output | ConvertTo-Json -Depth 10 | Out-File -Encoding utf8 -FilePath $OutputFile
Write-Output "Policy and initiative assignments exported to $OutputFile"
